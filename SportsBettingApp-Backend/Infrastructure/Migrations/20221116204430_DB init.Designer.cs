// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20221116204430_DB init")]
    partial class DBinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.BettingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryStringId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BettingDays");
                });

            modelBuilder.Entity("Domain.Models.BettingPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "categoryId");

                    b.Property<string>("FirstOpponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "firstOpponent");

                    b.Property<DateTime>("MatchStartUTC")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "matchStartUTC");

                    b.Property<string>("SecondOpponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "secondOpponent");

                    b.Property<int>("SportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("BettingPairs");

                    b.HasAnnotation("Relational:JsonPropertyName", "bettingPair");
                });

            modelBuilder.Entity("Domain.Models.BettingTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BetAmount")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "betAmount");

                    b.Property<bool>("IsWinningTicket")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "isWinningTicket");

                    b.Property<DateTime>("TicketPlacedTime")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketPlacedTime");

                    b.HasKey("Id");

                    b.ToTable("BettingTickets");
                });

            modelBuilder.Entity("Domain.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "icon");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.HasKey("Id");

                    b.ToTable("Sports");

                    b.HasAnnotation("Relational:JsonPropertyName", "sport");
                });

            modelBuilder.Entity("Domain.Models.TicketPair", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BettingPairId")
                        .HasColumnType("int");

                    b.Property<int?>("BettingTicketId")
                        .HasColumnType("int");

                    b.Property<int>("TipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BettingPairId");

                    b.HasIndex("BettingTicketId");

                    b.HasIndex("TipId");

                    b.ToTable("TicketPairs");

                    b.HasAnnotation("Relational:JsonPropertyName", "ticketPairs");
                });

            modelBuilder.Entity("Domain.Models.Tip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BettingPairId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("SportId")
                        .HasColumnType("int");

                    b.Property<double>("Stake")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "stake");

                    b.HasKey("Id");

                    b.HasIndex("BettingPairId");

                    b.HasIndex("SportId");

                    b.ToTable("Tips");

                    b.HasAnnotation("Relational:JsonPropertyName", "tip");
                });

            modelBuilder.Entity("Domain.Models.BettingPair", b =>
                {
                    b.HasOne("Domain.Models.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Domain.Models.TicketPair", b =>
                {
                    b.HasOne("Domain.Models.BettingPair", "BettingPair")
                        .WithMany()
                        .HasForeignKey("BettingPairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.BettingTicket", null)
                        .WithMany("TicketPairs")
                        .HasForeignKey("BettingTicketId");

                    b.HasOne("Domain.Models.Tip", "Tip")
                        .WithMany()
                        .HasForeignKey("TipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BettingPair");

                    b.Navigation("Tip");
                });

            modelBuilder.Entity("Domain.Models.Tip", b =>
                {
                    b.HasOne("Domain.Models.BettingPair", null)
                        .WithMany("Tips")
                        .HasForeignKey("BettingPairId");

                    b.HasOne("Domain.Models.Sport", null)
                        .WithMany("AvailableTips")
                        .HasForeignKey("SportId");
                });

            modelBuilder.Entity("Domain.Models.BettingPair", b =>
                {
                    b.Navigation("Tips");
                });

            modelBuilder.Entity("Domain.Models.BettingTicket", b =>
                {
                    b.Navigation("TicketPairs");
                });

            modelBuilder.Entity("Domain.Models.Sport", b =>
                {
                    b.Navigation("AvailableTips");
                });
#pragma warning restore 612, 618
        }
    }
}
